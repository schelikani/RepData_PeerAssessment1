summary(rfit)
qplot(am, mpg, geom="boxplot", method="lm", formula=y~x)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
qplot(am, mpg, geom="boxplot", method="lm", formula=y~x)
names(mtcars)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=am~)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=am~.)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=.~am)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=cyl.~am)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=cyl~am)
plot(mtcars[,c(mpg,cyl,wt,hp,disp,am)])
plot(mtcars[,c(mpg,cyl,wt,hp,disp,am)])
plot(mtcars[,c(mpg,wt,hp,disp,am)])
plot(mtcars[,c("mpg","wt","hp","am","cyl","disp")])
plot(mtcars$mpg,mtcars[,c("wt","hp","am","cyl","disp")])
plot(mtcars[,c("wt","hp","am","cyl","disp")], mtcars$mpg)
plot(mtcars[,c("mpg","gear","drat","vs","qsec")])
rfit5 = lm(mpg~hp+wt+disp, data =mtcars)
summary(rfit5)
rfit6 = lm(mpg~hp+wt, data =mtcars)
summary(rfit6)
rfit6 = lm(mpg~cyl+hp+wt, date=subset(mtcars, am ==0))
rfit6 = lm(mpg~cyl+hp+wt, data=subset(mtcars, am ==0))
rfit7 = lm(mpg~cyl+hp+wt, data=subset(mtcars, am ==1))
summary(rfit6)
summary(rfit7)
names(rfit7)
rfit7$terms
names(rfit7)
rfit7$model
names(rfit7)
rfit7$effects
rfit7$coefficients
rfit7$call
rfit7$xlevels
names(rfit7)
rfit7$rank
rfit7$df.residuals
rfit7$qr
names(rfit7)
summary(rfit7)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=cyl~am)
qplot(am, mpg, data=mtcars, geom="boxplot", method="lm", formula=y~x, facets=.~am)
qplot(am, mpg, data=mtcars, geom=c("boxplot","jitter"), method="lm", fill= am, formula=y~x, facets=.~am)
qplot(am, mpg, data=mtcars, geom=c("boxplot"), fill= am, facets=.~am)
install.packages("knitr")
averge(subset(mtcards, am==0))
mean(subset(mtcars, am==0))
mean(subset(mtcars, am==0)$mpg)
mean(subset(mtcars, am==1)$mpg)
rfit8 = lm(mpg~hp+wt+cyl+am, data=mtcars)
summary(rfit8)
qplot(rfit8$fitted.values, rfit8$residuals, data= mtcars, color=am)
qplot(rfit8$fitted.values, rfit8$residuals, data= mtcars, color=am, facets=.~am)
qplot(rfit8$fitted.values, rfit8$residuals, data= mtcars, color=am)
qplot(rfit8$fitted.values, rfit8$residuals, data= mtcars, color=am, facets=.~am)
qplot(rfit8$fitted.values, rfit8$residuals, data= mtcars, color=am, facets=.~am, geom=c("smooth","point"), method="lm", formula=y~x)
mtcars$am = factor(mtcars$am, levels=c(0,1), labels=c("Automatic","Manual"))
qplot(rfit8$fitted.values, rfit8$residuals, data= mtcars, color=am, facets=.~am, geom=c("smooth","point"), method="lm", formula=y~x)
help(plot)
help(xyploy)
help(xyplot)
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
help(xyplot)
summary(rfit8)
summary(rfit7)
rfit9 =lm(mpg~wt+hp+cyl+am+disp+drat, data=mtcars)
summary(rfit9)
rfit9 =lm(mpg~wt+hp+cyl+am+disp+drat+am, data=mtcars)
summary(rfit9)
rfit9 =lm(mpg~wt+hp+cyl+am+disp+drat, data=mtcars)
summary(rfit9)
summary(rfit8)
summary(rfit9)
summary(rfit8)
summary(rfit9)
rfit10 = lm(mpg~wt+cyl+am, data=mtcars)
summary(rfit10)
rfit11 = lm(mpg~wt+cyl, data=mtcars)
summary(rfit11)
summary(rfit10)
summary(rfit9)
summary(rfit10)
summary(rfit9)
summary(rfit10)
summary(rfit11)
summary(rfit10)
rfit12 = lm(mpg~cyl+wt, data=subset(mtcars,am==0))
rfit12 = lm(mpg~cyl+wt, data=subset(mtcars,am=="Manual"))
rfit13 = lm(mpg~cyl+wt, data=subset(mtcars,am=="Automatic"))
summary(rfit12)
summary(rfit13)
qplot(am, mpg, data=mtcars, geom=c("boxplot"), facets=.~am)
qplot(am, mpg, data=mtcars, geom=c("boxplot"), facets=.~am, color =am)
help(digits)
help(precision)
help(as.matrix)
as.matrix(cor(mtcars), nrow=12, ncol=12)
summary(rfit7)
rfit7$residuals
rfit7$Residuals
rfit7$coefficients
names(rfit7)
summary(rfit7)
help(boxplot)
boxplot(mtcars$mpg)
boxplot(mtcars$am, mtcars$mpg)
boxplot(mtcars$am, mtcars$mpg, color=am
)
boxplot(mtcars$am, mtcars$mpg, color=c("red","blue")
)
boxplot(mtcars$mpg~mtcars$am)
boxplot(mtcars$mpg~mtcars$am, border =c("red","blue"))
boxplot(mtcars$mpg~mtcars$am, border =c("red","blue"), main="MPG Vs Transmission", xlab ="am-transmission", ylab="MPG(Miles Per Gallon")
plot(rfit11$fitted.values, rfit11$residuals)
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", Main="Resisduals Vs Fitted values")
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", ain="Resisduals Vs Fitted values")
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", main="Resisduals Vs Fitted values")
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", title="Resisduals Vs Fitted values")
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", main="Resisduals Vs Fitted values")
help(plot)
plot(rfit11$fitted.values, rfit11$residuals,type ="b",xlab="MPG Fitted Values", ylab="MPG Residuals", main="Resisduals Vs Fitted values")
plot(rfit11$fitted.values, rfit11$residuals,type ="l",xlab="MPG Fitted Values", ylab="MPG Residuals", main="Resisduals Vs Fitted values")
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", main="Resisduals Vs Fitted values")
help(abline)
help(lines)
plot(rfit11$fitted.values, rfit11$residuals,xlab="MPG Fitted Values", ylab="MPG Residuals", main="Resisduals Vs Fitted values")
lines(lm(rfit11$residuals~rfit11$fitted.values), col="red")
summary(rfit7)
summary(rfit9)
help(options)
round(as.matrix(cor(mtcars)),2)
round(cor(mtcars),2)
names(rfit11)
rfit11[1]
rfit11[2]
names(rfit11)
rfit11[10]
rfit11[11]
names(rfit11)
rfit11[12]
q()
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
help(dfbeta)
rfit1 = lm(y~x)
plot(rfit1)
dfbetas(rfit1)
summary(rfit1)
hatvalues(rfit1)
rfit4 =lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(rfit4)
help(mtcars)
rfit3 = lm(mpg~wt+factor(cyl), data=mtcars)
summary(rfit3)
rfit3 = lm(mpg~wt+factor(cyl)-1, data=mtcars)
summary(rfit3)
q()
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
help(train)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
help(train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
names(vowel.test)
vowel.test$y
vowel.test$y =factor(vowel.test$y)
vowel.train$y =factor(vowel.train$y)
set.seed(33833)
mfit = train(y~., data=vowel.train, method="rf",prox= TRUE)
mfit = train(y~., data=vowel.train, method="rf",prox= TRUE)
q()
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("ElemStatLearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("gnm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y =factor(vowel.test$y)
vowel.train$y =factor(vowel.train$y)
set.seed(33833)
mfit = train(y~., data=vowel.train, method="rf",prox= TRUE)
install.packages("pgmm")
q()
install.packages(c("MASS", "Matrix"))
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("ggplot2")
q()
install.packages("caret")
install.packages("islr")
install.packages("ISLR")
q()
install.packages("jpeg")
install.packages("randomForest")
install.packages("sqldf")
install.packages("xlsx")
install.packages("XML")
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
mtcars
install.packages("knitr")
q()
q()
q()
q()
q()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
tc = trainControl(method = "repeatedcv", number = 3, repeats = 3, verboseIter=T, returnResamp='all')
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
tc = trainControl(method = "repeatedcv", number = 3, repeats = 3, verboseIter=T, returnResamp='all')
ls
ls()
vowel.train$y
range(vowel.train$y)
vowel.train$y = factor(vowel.train$y)
vowel.train$y
vowel.test$y = factor(vowel.test$y)
modFitRF = train(y ~.,data = vowel.train,method="rf", trControl=tc)
modFitRF
help(trainControl)
tc = trainControl(method = "boot", number = 3, repeats = 3, verboseIter=T, returnResamp='all')
modFitGBM = train(y ~.,data = vowel.train,method="gbm", trControl=tc)
install.packages("gbm")
modFitGBM = train(y ~.,data = vowel.train,method="gbm", trControl=tc)
modFitGBM
modFitRF
predict(modFitRF, data =vowel.test)
predRF = predict(modFitRF,newdata =vowel.test)
predGBM = predict(modFitGBM,newdata =vowel.test)
predRF$finalModel
names(predRF)
predRF
names(predGBM)
table(predRF, vowel.test$y)
table(predGBM, vowel.test$y)
length(vowel.test$y)
table(predRF,predGBM)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
modFitL= train(CompressiveStrength~., data=training, method="lasso")
install.packages("lasso2")
modFitL= train(CompressiveStrength~., data=training, method="lasso")
modFitL= train(CompressiveStrength~., data=training, method="lasso2")
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modfit1 = train(CompressiveStrenght~., data=trainng, method="svm")
modfit1 = train(CompressiveStrenght~., data=training, method="svm")
modfit1 = train(CompressiveStrenghth~., data=training, method="svm")
modfit1 = train(CompressiveStrength~., data=training, method="svm")
modfit1 = train(CompressiveStrength~., data=training, method="svmRadial")
pred1 = predict(modfit1, data=testing)
modfit1$finalModel
names(modfit1)
ls()
pred1 = predict(modfit1, data =testing)
pred1
pred1 = predict(modfit1, newdata =testing)
pred1
help(sum)
sum(pred1-testing)^2
sqrt(sum(pred1-testing)^2)
sqrt(sum(testing-pred1)^2)
names(testing)
sqrt(sum(testing$CompressiveStrength-pred1)^2)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
install.packages("lars")
modfit = train(CompressiveStrenght~., data=training, method="lasso")
modfit = train(CompressiveStrength~., data=training, method="lasso")
names(modfit)
modfit
modfit$results
modfit$finalModel
q()
install.packages("devtools")
install.packages("shiny")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries','ramnathv')
q()
getwd()
help(read.csv)
cdir = getwd()
setwd("/Users/Sridhar_Office/Dropbox/Courses/Hwork/RepData_PeerAssessment1/")
setwd("/Users/Sridhar_Office/Dropbox/Personal/Courses/Hwork/RepData_PeerAssessment1/")
a1 = read.csv("activity.csv", sep =",", header= T)
names(a1)
str(a1)
header(a1,3)
head(a1,3)
help(as.date)
help(as.date())
rowcount(a1)
rcount(a1)
nrow(a1)
nadata= is.na(a1$steps)
sum(nadata)
help(date)
a1$date = as.date(a1$date)
a1$date = as.Date(a1$date)
head(a1,3)
str(a1)
head(a1.interval)
head(a1$interval)
head(a1$interval, 20)
head(a1$interval, 40)
head(a1$interval, 100)
head(a1$interval, 300)
range(a1$interval)
help(aggregate)
a1stepMean = aggregate(a1, by=c(date), fun= mean, na.rm =T)
a1stepMean = aggregate(a1, by=c(date), FUN= mean, na.rm =T)
a1stepMean = aggregate(a1, by=c(a1$date), FUN= mean, na.rm =T)
a1stepMean = aggregate(a1, by=list(a1$date), FUN= mean, na.rm =T)
a1stepMean
a1stepMean = aggregate(a1, by=list(a1$date), FUN= sum, na.rm =T)
a1$date = as.character(a1$date)
a1stepMean = aggregate(a1, by=list(a1$date), FUN= sum, na.rm =T)
a1$date = as.Date(a1$date)
str(a1)
a1stepMean = aggregate(a1, by=list(a1$date), FUN= sum, na.rm =T)
a1$date =as.factor(a1.date)
a1$date =as.factor(a1$date)
a1stepMean = aggregate(a1, by=list(a1$date), FUN= sum, na.rm =T)
range(a1$date)
levels(a1$date)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
help(ddply)
ddply(a1, .a1$date, sum)
ddply(a1, .$date, sum)
ddply(a1, c("date"), summarise, sum1 = sum(steps, na.rm= T))
a1$date = as.Date(a1$date)
ddply(a1, c("date"), summarise, sum1 = sum(steps, na.rm= T))
mean(ddply(a1, c("date"), summarise, sum1 = sum(steps, na.rm= T))$sum1
)
median(ddply(a1, c("date"), summarise, sum1 = sum(steps, na.rm= T))$sum1)
help(hist)
tsteps= ddply(a1, c("date"), summarise, dsteps = sum(steps, na.rm= T))
hist(tsteps)
hist(tsteps$dsteps)
hist(tsteps$dsteps, freq = F)
hist(tsteps$dsteps)
help(plot)
names(tsteps)
plot(tsteps$date, tsteps$dsteps)
plot(tsteps$date, tsteps$dsteps, type ="h")
hist(tsteps$dsteps)
barplot(tsteps$dsteps)
barplot(tsteps$dsteps, col ="blue")
barplot(tsteps$dsteps, col ="red")
barplot(tsteps$dsteps, col ="red", names.arg=tsteps$date)
barplot(tsteps$dsteps, col ="red", names.arg=tsteps$date, main="Daily Total Steps Vs Date", xlab="Date", ylab="TotalDailySteps")
help(line)
help(abline)
abline(mean(tsteps$dsteps), 0)
abline(mean(tsteps$dsteps), 0, col="blue")
abline(median(tsteps$dsteps), 0, col="yellow")
abline(median(tsteps$dsteps), 0, col="yellow", lwd=5)
abline(mean(tsteps$dsteps), 0, col="blue", lwd=5)
legend("top center",c("TotalDailySteps", "StepsMean", "StepsMedian"), fill=c("red","blue","yellow"))
legend("top",c("TotalDailySteps", "StepsMean", "StepsMedian"), fill=c("red","blue","yellow"))
barplot(a1$steps, col ="red", names.arg=tsteps$date, main="Daily Total Steps Vs Date", xlab="Date", ylab="TotalDailySteps")
barplot(a1$steps, col ="red", names.arg=a1$date, main="Daily Total Steps Vs Date", xlab="Date", ylab="TotalDailySteps")
plot(a1$date, a1$steps, type="l",col ="red", main="Daily Total Steps Vs Date", xlab="Date", ylab="TotalDailySteps")
plot(a1$date, a1$steps, type="l",col ="red", main="5Minute Steps Vs Date", xlab="Date", ylab="5MinuteIntervalSteps")
isteps= ddply(a1, c("interval"), summarise, dsteps = mean(steps, na.rm= T))
names(isteps)
iTsteps= ddply(a1, c("interval"), summarise, imsteps = mean(steps, na.rm= T))
rm(isteps)
names(iTsteps)
plot(iTsteps$interval, iTsteps$imsteps, type="l",col ="red", main="5Minute Steps Vs Date", xlab="Date", ylab="5MinuteIntervalSteps")
plot(iTsteps$interval, iTsteps$imsteps, type="l",col ="red", main="Interval Mean Steps Vs 5Minute Interval", xlab="5 MinuteInterval#", ylab="5MinuteIntervalSteps")
plot(iTsteps$interval, iTsteps$imsteps, type="l",col ="red", main="Interval Mean Steps Vs 5Minute Interval", xlab="5 MinuteInterval#", ylab="Intervel Mean Steps")
plot(iTsteps$interval, iTsteps$imsteps, type="l",col ="red", main="Interval Mean Steps Vs 5Minute Interval", xlab="5 MinuteInterval#(Start Min of Day)", ylab="Intervel Mean Steps")
head(sort(iTsteps))
head(sort(iTsteps$imsteps))
head(sort(iTsteps$imsteps, decreating=F))
help(sort)
head(sort(iTsteps$imsteps, decreating=T))
head(sort(iTsteps$imsteps, decreating=T, na.last=T))
head(sort(iTsteps$imsteps, decreasing=T, na.last=T))
head(iTsteps[order(iTsteps$imsteps),])
tail(iTsteps[order(iTsteps$imsteps),])
help(order)
head(iTsteps[order(iTsteps$imsteps, na.last=T, decreasing=T),])
a2=a1[order(a1$steps, na.last=T, decreasing=T),]
tail(a2)
max(a2$interval)
a2 = a1[is.na(a1$step),]
a2 = a1[is.na(a1$steps),]
hist(a2$interval)
barplot(a2$date,a2$interval)
names(a2)
str(a2)
plot(a2$date,a2$interval)
as.factor(a2$date)
levels(as.factor(a2$date))
a3 = a2[date !=c("2012-10-01" "2012-10-08" "2012-11-01" "2012-11-04" "2012-11-09","2012-11-10" "2012-11-14" "2012-11-30"),]
a3 = a2[date !=list("2012-10-01" "2012-10-08" "2012-11-01" "2012-11-04" "2012-11-09","2012-11-10" "2012-11-14" "2012-11-30"),]
a3 = a2[!(date %in% c("2012-10-01" "2012-10-08" "2012-11-01" "2012-11-04" "2012-11-09","2012-11-10" "2012-11-14" "2012-11-30")),]
a3 = a2[!(a2$date %in% c("2012-10-01" "2012-10-08" "2012-11-01" "2012-11-04" "2012-11-09","2012-11-10" "2012-11-14" "2012-11-30")),]
a3 = a2[!(a2$date %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
names(a2)
a3 = a1[!(a1$date %in% levels(as.factor(a2$date))),]
a3 = a2[!(a2$date %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
a3 = a1[!(a1$date %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
a3 = a1[!(as.charater(a1$date) %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
a3 = a1[!(as.chareter(a1$date) %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
a3 = a1[!(as.charecter(a1$date) %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
a3 = a1[!(as.character(a1$date) %in% c("2012-10-01", "2012-10-08", "2012-11-01", "2012-11-04", "2012-11-09","2012-11-10", "2012-11-14", "2012-11-30")),]
names(a2)
head(a2,10)
iTstepsNew = iTsteps
iTstepsNew$date ="2012-10-01"
head(iTstepsNew,10)
head(iTsteps,q0)
head(iTsteps,10)
tail(iTsteps,10)
max(iTsteps$imsteps)
n1 = rbind(iTstepsNew,iTstepsNew[date="2012-10-08", interval,imsteps])
n1 = rbind(iTstepsNew,iTstepsNew[iTstepsNew$date="2012-10-08", interval,imsteps])
names(iTsteps)
help(weekday)
help(weekdays)
weekdays("2012-11-01")
weekdays(as.Date("2012-11-01"))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
help(ggplot)
help(qplot)
rm(list=ls(0))
rm(list=ls())
cdir = getwd()
setwd("/Users/Sridhar_Office/Dropbox/Personal/Courses/Hwork/RepData_PeerAssessment1/")
rm(cdir)
a1 = read.csv("activity.csv", sep =",", header= T)
nadata = sum(is.na(a1$steps))
nadata
rm(nadata)
nadays = sum(is.na(a1$steps))
nadates= levels(as.factor(a1[is.na(a1$steps),]))
a1[is.na(a1$steps),]$steps
a1[is.na(a1$steps),]$date
nadates= levels(as.factor(a1[is.na(a1$steps),]$date))
a3 = a1[!(a1$date %in% nadates),]
nadates = as.Date(nadates)
nadates
a3 = a1[!(a1$date %in% nadates),]
a3 = a1[!(as.character(a1$date) %in% as.character(nadates),]
a3 = a1[!(as.character(a1$date) %in% as.character(nadates)),]
nadates= levels(as.factor(a1[is.na(a1$steps),]$date))
a3 = a1[!(as.character(a1$date) %in% nadates),]
a3 = a1[!(as.character(a1$date) %in% c(nadates)),]
help(%in%)
?%in%
?"%in%"
as.character(a1$date) %in% nadates
nadates
is.na(a1$steps)
a1[is.na(a1$steps),]$date
rm(list =ls())
a1 = read.csv("activity.csv", sep =",", header= T)
nadays = sum(is.na(a1$steps))
a1[is.na(a1$steps),]$date)
a1[is.na(a1$steps),]$date
head(a1[is.na(a1$steps),],10)
head(a1[is.na(a1$steps),],2500:2600)
head(a1[is.na(a1$steps),],300)
a1
a1[is.na(a1$steps),]
range(a1$steps)
range(a1$steps, na.rm=T)
nalist = is.na(a1$steps)
a2=a1[nalist,]
a2=a1[is.na(a1$steps),]
a1[is.na(a1$steps),]
nadates= levels(as.factor(a1[nalist,]$date))
a1[is.na(a1$steps),]
a2=a1[is.na(a1$steps),]
nadates= levels(as.factor(a2$date))
a2$date
help(is.na)
q()
